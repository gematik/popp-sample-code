<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>de.gematik.refpopp</groupId>
    <artifactId>popp-example-impl-global</artifactId>
    <version>1.0.2</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>popp-server</artifactId>
  <version>1.0.2</version>
  <packaging>jar</packaging>

  <name>popp-server</name>

  <description>Example implementation POPP-Server</description>

  <properties>
    <docker.image.name>${docker.registry.gematik}/popp/popp-server
    </docker.image.name>
    <commit_hash>undefined</commit_hash>
    <skip.dockerbuild>true</skip.dockerbuild>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-core</artifactId>
      <version>4.33.0</version>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-jackson</artifactId>
      <version>${version.jjwt}</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-api</artifactId>
      <version>${version.jjwt}</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt-impl</artifactId>
      <version>${version.jjwt}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${version.assertj}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>de.gematik.refpopp</groupId>
      <artifactId>popp-commons</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>de.gematik.smartcards</groupId>
      <artifactId>de.gematik.smartcards.tlv</artifactId>
      <version>1.0.3</version>
    </dependency>
    <dependency>
      <groupId>de.gematik.smartcards</groupId>
      <artifactId>de.gematik.smartcards.crypto</artifactId>
      <version>1.0.3</version>
    </dependency>
    <dependency>
      <groupId>de.gematik.smartcards</groupId>
      <artifactId>de.gematik.smartcards.sdcom</artifactId>
      <version>1.0.3</version>
    </dependency>
    <dependency>
      <groupId>de.gematik.smartcards</groupId>
      <artifactId>de.gematik.smartcards.g2icc</artifactId>
      <version>1.0.3</version>
    </dependency>
    <dependency>
      <groupId>de.gematik.smartcards</groupId>
      <artifactId>de.gematik.smartcards.utils</artifactId>
      <version>1.0.3</version>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcprov-jdk18on</artifactId>
      <version>1.81</version>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcpkix-jdk18on</artifactId>
      <version>1.81</version>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcutil-jdk18on</artifactId>
      <version>1.81</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <configuration>
              <!--suppress UnresolvedMavenProperty, MavenModelInspection -->
              <encoding>UTF-8</encoding>
              <outputDirectory>${basedir}/target/tmpdocker</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/docker</directory>
                  <includes>
                    <include>**/*</include>
                  </includes>
                </resource>
                <resource>
                  <directory>${basedir}/target</directory>
                  <includes>
                    <include>popp-server*.jar</include>
                  </includes>
                  <excludes>
                    <exclude>popp-server-*-javadoc.jar</exclude>
                    <exclude>popp-server-*-sources.jar</exclude>
                  </excludes>
                </resource>
              </resources>
              <skip>${skip.dockerbuild}</skip>
            </configuration>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <id>copy-docker-resources-jar_and_dockerfile</id>
            <phase>package</phase>
          </execution>
          <execution>
            <configuration>
              <!--suppress UnresolvedMavenProperty, MavenModelInspection -->
              <encoding>UTF-8</encoding>
              <outputDirectory>${basedir}/target/tmpdocker/identities</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/resources/identities</directory>
                  <includes>
                    <include>**/*</include>
                  </includes>
                </resource>
              </resources>
              <skip>${skip.dockerbuild}</skip>
            </configuration>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <id>copy-docker-resources-identities</id>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${version.docker-maven-plugin}</version>
        <configuration>
          <images>
            <image>
              <build>
                <args>
                  <COMMIT_HASH>${commit_hash}</COMMIT_HASH>
                  <VERSION>${project.version}</VERSION>
                </args>
                <dockerFile>${basedir}/target/tmpdocker/Dockerfile</dockerFile>
              </build>
              <name>${docker.image.name}:${project.version}</name>
            </image>
          </images>
          <skip>${skip.dockerbuild}</skip>
          <verbose>true</verbose>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>build</goal>
            </goals>
            <id>default</id>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${version.spotless-maven-plugin}</version>
        <executions>
          <execution>
            <id>spotless-apply</id>
            <phase>validate</phase> <!-- Bind to the validate phase  -->
            <goals>
              <goal>apply</goal> <!-- Apply formatting -->
            </goals>
          </execution>
        </executions>
        <configuration>
          <formats>
            <!-- you can define as many formats as you want, each is independent -->
            <format>
              <!-- define the files to apply to -->
              <includes>
                <include>**/*.yml</include>
              </includes>
              <excludes>
                <exclude>**/target/**/*</exclude>
              </excludes>
              <!-- define the steps to apply to those files -->
              <trimTrailingWhitespace/>
              <endWithNewline/>
              <indent>
                <spaces>true</spaces>
                <spacesPerTab>2</spacesPerTab>
              </indent>
            </format>
          </formats>

          <java>
            <toggleOffOn/>
            <googleJavaFormat>
              <version>${version.spotless.google-java-format}</version>
              <style>GOOGLE</style>
              <reflowLongStrings>true</reflowLongStrings>
            </googleJavaFormat>
          </java>
          <groovy>
            <includes>
              <include>**/*.Jenkinsfile</include>
            </includes>
            <importOrder/>
          </groovy>
          <markdown>
            <includes>
              <include>**/*.md</include>
            </includes>
            <excludes>
              <exclude>**/target/**/*</exclude>
            </excludes>
          </markdown>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${version.jacoco-maven-plugin}</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>prepare-package</phase>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${version.maven-clean-plugin}</version>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${version.maven-compiler-plugin}</version>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <debug>true</debug>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${version.maven-enforcer-plugin}</version>
        <executions>
          <execution>
            <id>enforce-versions</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <version>${java.version}</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${version.maven-javadoc-plugin}</version>
        <configuration>
          <doclint>none</doclint>
        </configuration>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>${version.maven-source-plugin}</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${version.maven-surefire-plugin}</version>
        <configuration>
          <skipTests>${skip.unittests}</skipTests>
        </configuration>
      </plugin>

      <!-- to upload jacoco results to sonar server via mvn sonar:sonar-->
      <plugin>
        <groupId>org.sonarsource.scanner.maven</groupId>
        <artifactId>sonar-maven-plugin</artifactId>
        <version>${version.sonar-maven-plugin}</version>
      </plugin>

    </plugins>
  </build>

</project>
