/*
 * Copyright (Date see Readme), gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * *******
 *
 * For additional notes and disclaimer from gematik and in case of changes by gematik find details in the "Readme" file.
 */

package de.gematik.poppcommons.api.messages;

import static de.gematik.poppcommons.api.enums.EnumPoPPMessageTypes.START_MESSAGE;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import de.gematik.poppcommons.api.enums.CardConnectionType;
import java.io.Serial;
import java.io.Serializable;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;

/**
 * Start proof process using electronic health card (EHC) Sent by the client to start the EHC proof
 * process.
 */
@Getter
@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@NoArgsConstructor
public class StartMessage extends PoPPMessage implements Serializable {

  @Serial private static final long serialVersionUID = 1L;

  /**
   * The version of the eHC proof process to use, chosen by the client. Server is expected to
   * support this version. version="1.0.0": actual value of "version"
   */
  @JsonProperty("version")
  @NonNull
  private String version;

  /**
   * A unique identifier for the client session. If "cardConnectionType" is "...-connector" then
   * this value is generated by a connector, otherwise this value is generated by a client. A
   * 128-bit octet string identifying a clients's session consisting of one or more
   * "StandardScenarioMessage". It is recommended to use UUID according to RFC 4122. The
   * PoPP-Service will use this value as "StandardScenarioMessage.clientSessionId".
   */
  @JsonProperty("clientSessionId")
  @NonNull
  private String clientSessionId;

  /**
   * The type of smartcard connection the client claims to use:
   *
   * <p>"contact-standard": contact based smartcard communication using ISO/IEC 7816-3 protocol T=1,
   * no connector is not involved in the communication with eHC
   *
   * <p>"contact-connector": contact based smartcard communication using ISO/IEC 7816-3 protocol
   * T=1, a connector communicates with the eHC via an eHCT
   *
   * <p>"contactless-standard": contactless smartcard communication using a protocol from ISO/IEC
   * 14443 series, no connector is not involved in the communication with eHC
   *
   * <p>"contactless-connector": contactless smartcard communication using a protocol from ISO/IEC
   * 14443 series, a connector communicates with the eHC via an eHCT
   */
  @JsonProperty("cardConnectionType")
  @NonNull
  private CardConnectionType cardConnectionType;

  @Builder
  private StartMessage(
      final String version,
      final CardConnectionType cardConnectionType,
      final String clientSessionId) {
    this.version = version;
    this.cardConnectionType = cardConnectionType;
    this.clientSessionId = clientSessionId;
    this.type = START_MESSAGE;
  }
}
