/*
 * Copyright (Date see Readme), gematik GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * *******
 *
 * For additional notes and disclaimer from gematik and in case of changes by gematik find details in the "Readme" file.
 */

package de.gematik.refpopp.popp_client.connector;

import de.gematik.ws.conn.connectorcommon.v5.Status;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@Profile("mock")
public class MockConnectorCommunicationService implements ConnectorCommunicationService {

  private static final String CARD_HANDLE = "58366430-60ad-417b-ac8c-2a99467c6cf6";
  private static final String TEMP_UUID = "e4eaaaf2-d142-11e1-b3e4-080027620cdd";

  private final AtomicInteger counter = new AtomicInteger(1);

  @Override
  public String getConnectedEgkCard() {
    return CARD_HANDLE;
  }

  @Override
  public String startCardSession(final String cardHandle) {
    return TEMP_UUID;
  }

  @Override
  public Status stopCardSession(final String uuidSessionId) {
    final var status = new Status();
    status.setResult("OK");
    return status;
  }

  @Override
  public List<String> secureSendApdu(final String signedScenario) {
    if (counter.get() == 1) {
      counter.incrementAndGet();
      return List.of(
          "9000",
          "ef2bc003020000c103040502c210444549444d4548435f39303030030005c403010000c503020000c7030100009000");
    } else if (counter.get() == 2) {
      counter.incrementAndGet();
      return List.of(
          "7f2181d87f4e81915f290170420844454758588702227f494d06082a8648ce3d04030286410428405a0ccc5c53b6780356a5141eb47fed5f56be44bc22f2046fc053fedbc25e50e24a6d6af95c1cfee9497acce359a253f7d0b7abaea5d1a62de030145f0c975f200844454758581102237f4c1306082a8214004c0481185307800000000000005f25060203000703015f24060301000703005f37404cd260c0803b125a001ba81ba9f2e2b1390de4f14691c822a28cc776a186d7ba7f08704c27fdcdaeb1f8b243a37976cf37bf7c121858d0f0419de83217a395de9000",
          "7f2181da7f4e81935f290170420844454758581102237f494b06062b24030503018641048862bfb5a7ecc7ed4ffb0d6ee6d8d7845b02727473b3a01b796bcf3580cd28678b99cdab0d666eadba6e1af758d23471534bcc901dda3911231ad45fdf2356215f200c0009802768831100001565527f4c1306082a8214004c0481185307000000000000005f25060204000400025f24060209000400015f37400a405581def071d6a753985389da94a106ff1f029c1ac57bc76efab9b180a45721a4a776356f8b89a1d364ff987db2538375523e79eaf32c46b8814fed6489ed9000",
          "e0154f07d2760001448000b60a83084445475858870222e0154f07d2760001448000b60a83084445475858120223e0194f07d2760001448000a40e830c000a80276001011699902101e0194f07d2760001448000a40e830c4d6f7270686f414343455353e0164f07d2760001448000b60b83094d6f7270686f564552e0154f07d2760001448000b60a83084445475858860220e0154f07d2760001448000b60a830800000000000000139000");
    } else if (counter.get() == 3) {
      counter.incrementAndGet();
      return List.of(
          "9000",
          "7c43854104322b1feea21c51c78af13ea69e365d5fdc9038c95eb205590f6f0b0aaf37235b35c445e255ba373c28691afc25c648596761201258d26992b59ed5b1c5512ebd9000");
    } else if (counter.get() == 4) {
      counter.incrementAndGet();
      return List.of(
          "9000",
          "9000",
          "30820357308202fea00302010202070306e87ccdd8b9300a06082a8648ce3d040302308196310b3009060355040613024445311f301d060355040a0c1667656d6174696b20476d6248204e4f542d56414c494431453043060355040b0c3c456c656b74726f6e697363686520476573756e6468656974736b617274652d4341206465722054656c656d6174696b696e667261737472756b747572311f301d06035504030c1647454d2e45474b2d4341353120544553542d4f4e4c59301e170d3234303430323030303030305a170d3239303430313233353935395a3081d7310b3009060355040613024445311d301b060355040a0c145465737420474b562d53564e4f542d56414c494431123010060355040b0c0931303935303039363931133011060355040b0c0a58313130353332373937310c300a06035504040c03c3987a31263024060355042a0c1d4672616e7a2046616269616e20446172697573204b6576696e20766f6e31123010060355040c0c0950726f662e2044722e3136303406035504030c2d50726f662e2044722e204672616e7a2046616269616e20442e204b2e20766f6e20c3987a544553542d4f4e4c59305a301406072a8648ce3d020106092b2403030208010107034200049137c5476175ca0748153120c55f0bbc4aa4a0dab1d0e0da9799063e49e5c6fd5c8b4cf41c25ec94eeedd13c6bbe4206068186d6c48c17e2aa5e3d921baa05b5a381f23081ef303b06082b06010505070101042f302d302b06082b06010505073001861f687474703a2f2f656863612e67656d6174696b2e64652f6563632d6f63737030200603551d2004193017300a06082a8214004c048123300906072a8214004c0446303006052b240803030427302530233021301f301d30100c0e56657273696368657274652f2d72300906072a8214004c0431300e0603551d0f0101ff040403020780300c0603551d130101ff04023000301f0603551d2304183016801474e9f91483e10be611f62aac97ecd9af9943c1f0301d0603551d0e041604145ca1384f2b5f2a75a2a5126580dae61a2370952d300a06082a8648ce3d040302034700304402201a8bb350538157c306163e4562e9e7e71dff4b00653b1fb854c7338fa76f3381022060cc4ba1d14716963b41f7062bba9cf78a43477a4bfb55109f439ad0928006d59000");
    }
    return List.of();
  }
}
